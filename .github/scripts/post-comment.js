const fs = require("fs");
const https = require("https");

const postComment = async () => {
  try {
    // Read the review output
    const review = fs.readFileSync("review_output.md", "utf8");

    // Get environment variables
    const token = process.env.GITHUB_TOKEN;
    const owner = process.env.REPO_OWNER;
    const repo = process.env.REPO_NAME;
    const prNumber = process.env.PR_NUMBER;

    if (!token || !owner || !repo || !prNumber) {
      throw new Error("Missing required environment variables");
    }

    console.log("üì§ Posting review comment to PR...");
    console.log(`   Repository: ${owner}/${repo}`);
    console.log(`   PR Number: ${prNumber}`);

    // Create comment body with header and footer
    const commentBody = `## ü§ñ Gemini AI Code Review

${review}

---
*This review was automatically generated by Gemini AI. Please use your judgment and verify all suggestions.*

<details>
<summary>üí° How to use this review</summary>

- **Critical issues** should be addressed before merging
- **Suggestions** are optional improvements to consider
- **Security concerns** should be carefully evaluated
- Use the review as a starting point for discussion with your team

</details>`;

    // Prepare API request
    const data = JSON.stringify({
      body: commentBody,
    });

    const options = {
      hostname: "api.github.com",
      port: 443,
      path: `/repos/${owner}/${repo}/issues/${prNumber}/comments`,
      method: "POST",
      headers: {
        Authorization: `token ${token}`,
        "Content-Type": "application/json",
        "Content-Length": data.length,
        "User-Agent": "Gemini-AI-Review-Bot",
        Accept: "application/vnd.github.v3+json",
      },
    };

    // Make the request
    await new Promise((resolve, reject) => {
      const req = https.request(options, (res) => {
        let responseData = "";

        res.on("data", (chunk) => {
          responseData += chunk;
        });

        res.on("end", () => {
          if (res.statusCode >= 200 && res.statusCode < 300) {
            console.log("‚úÖ Comment posted successfully!");
            const response = JSON.parse(responseData);
            console.log(`   Comment URL: ${response.html_url}`);
            resolve();
          } else {
            reject(
              new Error(
                `GitHub API returned ${res.statusCode}: ${responseData}`
              )
            );
          }
        });
      });

      req.on("error", (error) => {
        reject(error);
      });

      req.write(data);
      req.end();
    });
  } catch (error) {
    console.error("‚ùå Error posting comment:", error.message);
    process.exit(1);
  }
};

// Run the function
postComment();

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReviewed = void 0;
require("dotenv/config");
const promises_1 = require("node:fs/promises");
const getReviewed = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const review = yield (0, promises_1.readFile)("review_output.md", "utf8");
        const commentBody = `## ü§ñ Gemini AI Code Review

${review}

---
*This review was automatically generated by Gemini AI. Please use your judgment and verify all suggestions.*

<details>
<summary>üí° How to use this review</summary>

- **Critical issues** should be addressed before merging
- **Suggestions** are optional improvements to consider
- **Security concerns** should be carefully evaluated
- Use the review as a starting point for discussion with your team

</details>`;
        return {
            data: commentBody,
        };
    }
    catch (_e) {
        const e = _e;
        console.error("‚ùå Error posting comment:", e.message);
        process.exit(1);
    }
});
exports.getReviewed = getReviewed;
//# sourceMappingURL=post-comment.js.map